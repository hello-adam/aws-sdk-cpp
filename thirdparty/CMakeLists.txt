cmake_minimum_required(VERSION 3.24)

project("aws-cpp-sdk-static-deps" VERSION 1.0.0 LANGUAGES CXX)

include(ExternalProject)

set(EXTRA_CMAKE_ARGS
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    -DBUILD_SHARED_LIBS:BOOL=OFF
    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
)

if ( NOT MSVC )
    list(APPEND EXTRA_CMAKE_ARGS -DCMAKE_CXX_FLAGS:STRING=-ffunction-sections)
    if ( APPLE )
        list(APPEND EXTRA_CMAKE_ARGS -DCMAKE_OSX_ARCHITECTURES:STRING=${CMAKE_OSX_ARCHITECTURES})
    endif()
endif()

# # library naming
# set(LIBPREFIX ${CMAKE_STATIC_LIBRARY_PREFIX})
# set(LIBSUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})

# # library names
# if( MSVC )
#   set(ZLIBNAME zlibstatic.lib)
#   set(SSLLIBPREFIX "lib")
#   if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
#     set(SSLNAMESUFFIX "-1_1-x64" )
#   elseif( CMAKE_SIZEOF_VOID_P EQUAL 4 )
#     set(SSLNAMESUFFIX "-1_1" )
#   endif()
# else()
#   if( ANDROID )
#     set(SSLNAMESUFFIX "_1_1" )
#   endif()
#   set(ZLIBNAME libz.a)
#   set(SSLLIBPREFIX ${CMAKE_STATIC_LIBRARY_PREFIX})
# endif()
# set(SSLLIBNAME ${SSLLIBPREFIX}ssl${SSLNAMESUFFIX}.${CMAKE_STATIC_LIBRARY_SUFFIX})
# set(CRYPTOLIBNAME ${SSLLIBPREFIX}crypto${SSLNAMESUFFIX}.${CMAKE_STATIC_LIBRARY_SUFFIX})


# OpenSSL
# set(OPENSSL_INSTALL_DIR ${CMAKE_BINARY_DIR}/OpenSsl-install)
# set(OPENSSL_INCLUDE_DIR ${OPENSSL_INSTALL_DIR}/include PARENT_SCOPE)

if (WIN32)
  set(OPENSSL_FILE_BASE windows-x64)
elseif (APPLE)
    set(OPENSSL_FILE_BASE macos-universal2)
else()
    set(OPENSSL_FILE_BASE linux-x86_64)
endif()

file(DOWNLOAD "https://github.com/hello-adam/openssl/releases/download/18/${OPENSSL_FILE_BASE}.zip" ${CMAKE_BINARY_DIR}/openssl.zip)
file(ARCHIVE_EXTRACT INPUT ${CMAKE_BINARY_DIR}/openssl.zip DESTINATION ${CMAKE_SOURCE_DIR}/../dist)
# file(MAKE_DIRECTORY ${OPENSSL_INCLUDE_DIR})

# add_library(OpenSSL::SSL STATIC IMPORTED GLOBAL)
# set_property(TARGET OpenSSL::SSL PROPERTY IMPORTED_LOCATION ${OPENSSL_INSTALL_DIR}/lib/${SSLLIBNAME})
# set_property(TARGET OpenSSL::SSL PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${OPENSSL_INCLUDE_DIR})
# add_dependencies(OpenSSL::SSL OpenSSL)

# add_library(OpenSSL::Crypto STATIC IMPORTED GLOBAL)
# set_property(TARGET OpenSSL::Crypto PROPERTY IMPORTED_LOCATION ${OPENSSL_INSTALL_DIR}/lib/${CRYPTOLIBNAME})
# set_property(TARGET OpenSSL::Crypto PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${OPENSSL_INCLUDE_DIR})
# add_dependencies(OpenSSL::Crypto OpenSSL)

# ZLIB
# set(ZLIB_INSTALL_DIR ${CMAKE_BINARY_DIR}/Zlib-install)
# set(ZLIB_INCLUDE_DIR ${ZLIB_INSTALL_DIR}/include PARENT_SCOPE)
ExternalProject_Add(Zlib
  GIT_REPOSITORY "https://github.com/madler/zlib.git"
  GIT_TAG "v1.3"
  GIT_SHALLOW ON
  SOURCE_DIR ${CMAKE_BINARY_DIR}/Zlib
  BINARY_DIR ${CMAKE_BINARY_DIR}/Zlib-build
  CMAKE_CACHE_ARGS ${EXTRA_CMAKE_ARGS} -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_SOURCE_DIR}/../dist
)
# file(MAKE_DIRECTORY ${ZLIB_INCLUDE_DIR})

# add_library(ZLIB::ZLIB STATIC IMPORTED GLOBAL)
# set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_LOCATION ${ZLIB_INSTALL_DIR}/lib/${ZLIBNAME})
# set_property(TARGET ZLIB::ZLIB PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${ZLIB_INCLUDE_DIR})
# add_dependencies(ZLIB::ZLIB Zlib)
